// Konstanten, globale Variablen und Formulas
// ==========================================

// Konstanten und globale Variablen werden wie in PRISM definiert.
const int c = 3;
global x : [0..2] init 1;

// Zusätzlich zu den einfachen Typen bool und integer stehen Arrays zur
// Verfügung. Der Elementtyp eines Arrays muss ein einfacher Typ sein,
// mehrdimensionale Arrays sind nicht möglich. Die Größe des Arrays wird
// durch minimalen und maximalen Index definiert. Folgendes Array hat damit
// 3 Elemente.
global arr : array [1 .. 3] of bool init false; // alle Elemente werden mit 'false' initialisiert

// Auf die Elemente des Arrays wird mittels des Index-Operators zugegriffen,
// z.B. arr[1].

// Formulas werden ebenfalls wie in PRISM definiert, können aber auch
// parametrisiert werden.
formula add(a, b) = a + b;
formula clamp(lower, x, upper) = x < lower ? lower : (x > upper ? upper : x);

// In einem Ausdruck können formulas beispielsweise wie folgt verwendet werden:
const int d = clamp(1, add(2, 2), 3); // d = 3


// Modules
// =======

// Modules, die nicht von einem Feature referenziert werden, werden
// ignoriert. Es ist daher nötig alle Module, die übersetzt werden sollen,
// einem Feature zuzuordnen. Im einfachsten Fall werden alle Modules im
// Wurzelfeature aufgelistet, z.B.:

feature root
    modules foo, bar;
endfeature

module foo
    x : bool init false;

    [sync] y -> (x' = !x);
endmodule

module bar
    y : bool init true;

    [sync] !x -> (y' = !y);
endmodule


// Der Renaming-Mechanismus von PRISM ist in ProFeat nicht vorhanden.
// Um ein Modul zu duplizieren, kann ein Multi-Feature definiert werden:

feature group // dieses Feature gruppiert die Instanzen des Multi-Features
    all of multi[c]; // innerhalb der eckigen Klammern kann ein beliebiger
                     // (konstanter) Ausdruck stehen
endfeature

feature multi // das Multi-Feature, von dem c viele Instanzen erzeugt werden
    modules multi_module;
endfeature

module multi_module // die Implementierung des Multi-Features
    x : [0..c] init id;

    [act[id]] x < c -> (x' = x + 1); // Action-Labels können indiziert werden
endmodule

// Das Module 'multi_module' existiert dreifach. Innerhalb des Modules kann
// mittels 'id' auf den Index der Instanz zugegriffen werden. Im Beispiel wird
// somit die Variable x im ersten Module mit 0 initialisiert, im zweiten mit 1
// usw.
// Auf die Variable x der ersten Instanz wird durch multi[0].x zugegriffen,
// auf die der zweiten Instanz durch multi[1].x, usw.


// Modules können parametrisiert werden, wie folgendes Beispiel zeigt. Die
// Parameter können dabei in jedem beliebigen Ausdruck innerhalb des Rumpfes
// verwendet werden (Action-Labels sind _keine_ Ausdrücke!).

module parametrized(x, y)
    s : [x .. y] init x;

    [] s = x -> (s' = y);
endmodule

// Ein Module-Template muss von einem Feature instanziiert werden, z.B.:

feature param_inst
    modules parametrized(1, 3);
endfeature


// Metaprogrammierung
// ==================

// Mittels for-Schleifen können Code-Teile wiederholt werden.

// Wird mit einer for-Schleife ein Ausdruck wiederholt, so muss angegeben
// werden, mit welchem binären Operator die Ausdrücke verkettet werden sollen.
// Folgende formula berechnet die Summe der Zahlen von 1 bis n:
formula sum(n) = for i in [1..n] { i + ... };

// Im ersten Durchlauf wird i der Wert 1 zugewiesen: 1 + ...
// Anstelle der ... wird der Ausdruck des nächsten Durchlaufs eingesetzt, also
// 1 + 2 + ...
// Dies wird wiederholt, bis n erreicht ist.

feature root2 { // Blöcke können alternativ auch durch { } angegeben werden
    modules meta;
}

module meta {
    a : array [1..3] of bool;

    // for-Schleife um Commands
    for i in [1..3] {
        [] !a[i] -> (a[i]' = true);
    }

    // for-Schleife um stochastische Updates
    [] true -> for i in [1..3] { (1/3):(a[i]' = true) };

    // for-Schleife um Zuweisung
    [] true -> 1.0:for i in [2..3] { (a[i-1]' = a[i]) };
}
